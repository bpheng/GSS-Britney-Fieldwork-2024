}
}
rsq_numAttr <- na.omit(rsq_numAttr)
curoff <- 0.2 # cutoff of the minimum r-sq value
max_rav <- apply(rsq_numAttr, 1, max)
max_attr <- which(max_rav > curoff) # the maximum r-sq of the sample score should be above this cutoff
target_rsq <- rsq_numAttr[max_attr,]
heatmap(as.matrix(target_rsq), scale = "none")
## Value is centered and scaled in the column direction (`scale = "column"`)
heatmap(as.matrix(target_rsq), scale = "column")
curoff <- 0.2 # cutoff of the minimum r-sq value
max_rav <- apply(rsq_numAttr, 1, max)
max_attr <- which(max_rav > curoff) # the maximum r-sq of the sample score should be above this cutoff
target_rsq <- rsq_numAttr[max_attr,]
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
})
## SummarizedExperiment object containing COAD dataset
coad_cancer <- readRDS("/Users/bpheng/GSS-Britney-Fieldwork-2024/data/coad_cancer.rds")
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("/Users/bpheng/GSS-Britney-Fieldwork-2024/data/coad_cancer_sampleScore.csv", row.names = 1)
## COAD categorical variables
charTb <- read.csv("/Users/bpheng/GSS-Britney-Fieldwork-2024/data/coad_cancer_char.csv", row.names = 1)
factorTb <- charTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)
nlevel <- sapply(factorTb, function(x) {
res <- levels(x) %>% na.omit
return(length(res))
})
factorTb_1_lv <- factorTb[nlevel == 1]
factorTb_2_lv <- factorTb[nlevel == 2]
factorTb_m_lv <- factorTb[nlevel > 2]
wilcox_test_res <- as.data.frame(matrix(nrow = ncol(factorTb_2_lv),
ncol = ncol(sampleScore_sub)))
rownames(wilcox_test_res) <- colnames(factorTb_2_lv)
colnames(wilcox_test_res) <- colnames(sampleScore_sub)
wtest_coad_wvalue <- wilcox_test_res
wtest_coad_pvalue <- wilcox_test_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_2_lv))) {
## wilcoxon test
wilcox_test <- wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j], alternative="two.sided")
## W value
wval <- wilcox_test$statistic
wtest_coad_wvalue[j, i] <- wval
## p-value
pval <- wilcox_test$p.value
wtest_coad_pvalue[j, i] <- pval
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(wtest_coad_wvalue))
wtest_coad_wvalue_2 <- wtest_coad_wvalue[-batch_char_ind,]
wtest_coad_pvalue_2 <- wtest_coad_pvalue[-batch_char_ind,]
heatmap(as.matrix(wtest_coad_wvalue_2), main = 'COAD All Samples: Wilcoxon Test Binomial')
#Only view w-values with significant p-value (<0.01)
wtest_coad_sig_wvalue <- wilcox_test_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_2_lv))) {
if (wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j], alternative="two.sided")$p.val < 0.01) {
wtest_coad_sig_wvalue[j, i] <- wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j],
alternative="two.sided")$statistic
}
}
}
na_ind <- apply(wtest_coad_sig_wvalue, 1, function(x) all(is.na(x)))
wtest_coad_sig_wvalue <- wtest_coad_sig_wvalue[!na_ind, ]
batch_char_ind_2 <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(wtest_coad_sig_wvalue))
wtest_coad_sig_wvalue <- wtest_coad_sig_wvalue[-batch_char_ind_2, ]
options(ztable.type='html')
ztable(wtest_coad_sig_wvalue) %>%
makeHeatmap(palette = 'Blues') %>%
print(caption='Cancer Sample W-test with p-values < 0.01')
kruskal_wallis_res <- as.data.frame(matrix(nrow = ncol(factorTb_m_lv),
ncol = ncol(sampleScore_sub)))
rownames(kruskal_wallis_res) <- colnames(factorTb_m_lv)
colnames(kruskal_wallis_res) <- colnames(sampleScore_sub)
kw_coad_hvalue <- kruskal_wallis_res
kw_coad_pvalue <- kruskal_wallis_res
kw_coad_sig_hvalue <- kruskal_wallis_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_m_lv))) {
## Kruskal-Wallis Test
kruskal_test <- kruskal.test(sampleScore_sub[, i] ~ factorTb_m_lv[,j])
## Kruskal-Wallis Chi-squared value
kw_val <-  kruskal_test$statistic
kw_coad_hvalue[j, i] <- kw_val
## p-value
pval <-  kruskal_test$p.value
kw_coad_pvalue[j, i] <- pval
## Kruskal-Wallis Chi-squared value with significant p-value (<0.05)
if (kruskal_test$p.value < 0.05) {
kw_coad_sig_hvalue[j,i] <- kruskal_test$statistic
}
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(kw_coad_hvalue))
kw_coad_hvalue <- kw_coad_hvalue[-batch_char_ind,]
kw_coad_pvalue <- kw_coad_pvalue[-batch_char_ind,]
kw_coad_sig_hvalue <- kw_coad_sig_hvalue[-batch_char_ind,]
write.csv(kw_coad_hvalue, "/Users/bpheng/GSS-Britney-Fieldwork-2024/data/kw_coad_hvalue.csv")
write.csv(kw_coad_pvalue, "/Users/bpheng/GSS-Britney-Fieldwork-2024/data/kw_coad_pvalue.csv")
write.csv(kw_coad_sig_hvalue, "/Users/bpheng/GSS-Britney-Fieldwork-2024/data/kw_coad_sig_hvalue.csv")
heatmap(as.matrix(kwtest_coad_wvalue), main = 'COAD All Samples: Kruskal-Wallis Test')
heatmap(as.matrix(kwtest_coad_wvalue), main = 'COAD All Samples: Kruskal-Wallis Test')
heatmap(as.matrix(kwtest_coad_hvalue), main = 'COAD Cancer Samples: Kruskal-Wallis Test')
heatmap(as.matrix(kwtest_coad_hvalue), main = 'COAD Cancer Samples: Kruskal-Wallis Test')
kruskal_wallis_res <- as.data.frame(matrix(nrow = ncol(factorTb_m_lv),
ncol = ncol(sampleScore_sub)))
rownames(kruskal_wallis_res) <- colnames(factorTb_m_lv)
colnames(kruskal_wallis_res) <- colnames(sampleScore_sub)
kw_coad_hvalue <- kruskal_wallis_res
kw_coad_pvalue <- kruskal_wallis_res
kw_coad_sig_hvalue <- kruskal_wallis_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_m_lv))) {
## Kruskal-Wallis Test
kruskal_test <- kruskal.test(sampleScore_sub[, i] ~ factorTb_m_lv[,j])
## Kruskal-Wallis Chi-squared value
kw_val <-  kruskal_test$statistic
kw_coad_hvalue[j, i] <- kw_val
## p-value
pval <-  kruskal_test$p.value
kw_coad_pvalue[j, i] <- pval
## Kruskal-Wallis Chi-squared value with significant p-value (<0.05)
if (kruskal_test$p.value < 0.05) {
kw_coad_sig_hvalue[j,i] <- kruskal_test$statistic
}
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(kw_coad_hvalue))
kw_coad_hvalue <- kw_coad_hvalue[-batch_char_ind,]
kw_coad_pvalue <- kw_coad_pvalue[-batch_char_ind,]
kw_coad_sig_hvalue <- kw_coad_sig_hvalue[-batch_char_ind,]
write.csv(kw_coad_hvalue, "/Users/bpheng/GSS-Britney-Fieldwork-2024/data/kw_coad_hvalue.csv")
write.csv(kw_coad_pvalue, "/Users/bpheng/GSS-Britney-Fieldwork-2024/data/kw_coad_pvalue.csv")
write.csv(kw_coad_sig_hvalue, "/Users/bpheng/GSS-Britney-Fieldwork-2024/data/kw_coad_sig_hvalue.csv")
heatmap(as.matrix(kw_coad_sig_hvalue), main = 'COAD Cancer Samples: Kruskal-Wallis Test')
heatmap(as.matrix(kw_coad_sig_hvalue), main = 'COAD Cancer Samples: Kruskal-Wallis Test')
heatmap(as.matrix(kw_coad_hvalue), main = 'COAD Cancer Samples: Kruskal-Wallis Test')
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
library(randomForest)
library(caret)
})
RAVmodel <- getModel('C2', load=TRUE)
coad <- curatedTCGAData(diseaseCode = 'COAD',
assays = 'RNA*',
version = '2.0.1',
dry.run = FALSE)
sampleTables(coad)
coad2 <- TCGAsplitAssays(coad, c("01", "11"))
coad_rna_cancer <- getWithColData(coad2,
'01_COAD_RNASeq2Gene-20160128')
assay(coad_rna_cancer) <- log2(assay(coad_rna_cancer) + 1)
coad_rna_cancer <- coad_rna_cancer[,coad_rna_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status %in% c('msi-h', 'mss')]
coad_meta_cancer <- colData(coad_rna_cancer)
validate_coad_cancer <- validate(coad_rna_cancer, RAVmodel)
heatmapTable(validate_coad_cancer, RAVmodel, num.out=15)
# Select columns with >10% completeness
complete_ind <- which(colSums(!is.na(coad_meta_cancer)) > round(nrow(coad_meta_cancer)/10))
meta_complete <- coad_meta_cancer[complete_ind] %>% subset (select = -patientID) # remove `patientID`
# Randomly select 70% of samples for training
set.seed(1)
num_sample <- ncol(coad_rna_cancer)
train_sample_ind <- sample(seq_len(num_sample), round(num_sample*0.7))
meta_train <- meta_complete[train_sample_ind,] # 163 samples x 649 metadata attributes
coad_train <- coad_rna_cancer[, train_sample_ind] # 20,501 genes x 163 samples
batch_var <- "analyte|portion|procurement|aliquot|uuid|barcode"
batch_ind <- grep(batch_var, colnames(meta_train))
meta_train <- meta_train[,-batch_ind] # 163 samples x 246 metadata attributes
meta_test <- meta_complete[-train_sample_ind,-batch_ind] # 70 samples x 246 metadata attributes
coad_test <- coad_rna_cancer[, -train_sample_ind] # 20,501 genes x 70 samples
## Check for data types in listData
var_type <- meta_train@listData
unique(sapply(var_type, type))
## Separate training data's metadata into two subsets:
## character variables (~ categorical) and numeric variables (~ continuous)
charcTb <- meta_train[, sapply(var_type, class) == 'character'] # 163 samples x 160 metadata attributes (char)
numTb <- meta_train[, sapply(var_type, class) %in% c('numeric', 'integer')] # 163 samples x 74 metadata attributes (num)
## Check for data types in listData
var_type_testdata <- meta_test@listData
## Separate test data's metadata into two subsets:
## character variables (~ categorical) and numeric variables (~ continuous)
charcTb_testdata <- meta_test[, sapply(var_type_testdata, class) == 'character'] # 70 samples x 160 metadata attributes (char)
numTb_testdata <- meta_test[, sapply(var_type_testdata, class) %in% c('numeric', 'integer')] # 70 samples x 86 metadata attributes (num)
## Calculate validation scores
sampleScore <- calculateScore(coad_train, RAVmodel)
rownames(sampleScore) <- gsub("\\.", "-", rownames(sampleScore))
## Test data: calculate validation scores
sampleScore_testdata <- calculateScore(coad_test, RAVmodel)
rownames(sampleScore_testdata) <- gsub("\\.", "-", rownames(sampleScore_testdata))
## Training Data
validate_coad <- validate(coad_train, RAVmodel)
heatmapTable(validate_coad, RAVmodel)
validated_ind <- validatedSignatures(validate_coad,
RAVmodel,
num.out = 15,
scoreCutoff = 0.45,
indexOnly = TRUE)
## Subset sampleScore
sampleScore_sub <- sampleScore[,validated_ind] %>% as.data.frame()
## Test Data
validate_coad_testdata <- validate(coad_test, RAVmodel)
heatmapTable(validate_coad_testdata, RAVmodel, num.out = 15)
validated_ind_testdata <- validatedSignatures(validate_coad_testdata,
RAVmodel,
num.out = 4764,
#scoreCutoff = 0.45,
indexOnly = TRUE)
## Subset sampleScore
sampleScore_sub_testdata <- sampleScore_testdata[,validated_ind_testdata] %>% as.data.frame()
# SummarizedExperiment object containing COAD train dataset
saveRDS(coad_train, "data/tcga_coad_cancer_train.rds") # 20,501 genes x 226 samples
# Sample scores for the train set (80% of the randomly selected COAD samples)
# Only the top 15 validated RAVs
write.csv(sampleScore_sub, "data/sampleScore_train_cancer.csv") # 226samples x 15 RAVs
## Training set's metadata: character and numeric variables
write.csv(charcTb, "data/meta_train_char_cancer.csv", row.names = TRUE)
write.csv(numTb, "data/meta_train_num_cancer.csv", row.names = TRUE)
## Convert character variables into the factor data type
factorTb <- charcTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)
levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)[levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status) == "msi-h"] <- "msi"
## Convert character variables into the factor data type
factorTb_testdata <- charcTb_testdata
factorTb_testdata[sapply(factorTb_testdata, is.character)] <- lapply(factorTb_testdata[sapply(factorTb_testdata, is.character)], factor)
levels(factorTb_testdata@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)[levels(factorTb_testdata@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status) == "msi-h"] <- "msi"
validated_RAVs <- c("RAV61", "RAV64", "RAV188", "RAV190", "RAV192",
"RAV220", "RAV324", "RAV438", "RAV833", "RAV834",
"RAV868", "RAV1008", "RAV1575")
target_attr <- "patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status"
labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
data <- sampleScore_sub[,validated_RAVs]
train_data <- data[nonNALabels,]
train_labels <- labels[nonNALabels]
train_data$MSI_Status <- train_labels
rf <- randomForest(MSI_Status~., data=train_data, proximity=TRUE)
print(rf)
p1 <- predict(rf, train_data)
#confusionMatrix(p1, train_data$MSI_Status)
confusion_matrix <- table(p1, train_data$MSI_Status)
confusion_matrix
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(accuracy)
importance(rf)
varImpPlot(rf)
predictions1 <- predict(rf, newdata = train_data, predict.all = TRUE)
tree_predictions <- predictions1$individual  # Extract tree predictions
# Calculate accuracy for each tree (for classification)
tree_accuracy <- apply(tree_predictions, 2, function(tree_pred) {
mean(tree_pred == train_data$MSI_Status)
})
# print(tree_accuracy)
# sort(tree_accuracy)
# Calculate weights proportional to accuracy
weights <- tree_accuracy / sum(tree_accuracy)
# Combine predictions using weighted average
weighted_predictions <- apply(tree_predictions, 1, function(preds) {
weighted_pred <- tapply(weights, preds, sum)
names(which.max(weighted_pred))
})
# Convert weighted predictions to factor
weighted_predictions <- as.factor(weighted_predictions)
confusion_matrix <- table(weighted_predictions, train_data$MSI_Status)
confusion_matrix
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(accuracy)
labels <- factorTb_testdata[[target_attr]]
nonNALabels <- which(!is.na(labels))
data <- sampleScore_sub_testdata[,validated_RAVs]
test_data <- data[nonNALabels,]
test_labels <- labels[nonNALabels]
test_data$MSI_Status <- test_labels
p2 <- predict(rf, test_data)
confusionMatrix(p2, test_data$MSI_Status)
library("rpart")
library("rpart.plot")
#fit new model with rpart
train_msi_model <- rpart(MSI_Status ~., data = train_data)
test_msi_model <- rpart(MSI_Status ~., data = test_data)
# plot the tree
rpart.plot(train_msi_model)
plot(rf)
labels <- factorTb_testdata[[target_attr]]
nonNALabels <- which(!is.na(labels))
data <- sampleScore_sub_testdata[,validated_RAVs]
test_data <- data[nonNALabels,]
test_labels <- labels[nonNALabels]
test_data$MSI_Status <- test_labels
p2 <- predict(rf, test_data)
confusionMatrix(p2, test_data$MSI_Status)
stad_rna_cancer <- readRDS(file="/Users/bpheng/GSS-Britney-Fieldwork-2024/data/stad_rna_cancer.rds")
stad_rna_cancer <- stad_rna_cancer[,stad_rna_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status %in% c('msi-h', 'mss')]
stad.meta <- colData(stad_rna_cancer)
stad.sampleScore <- calculateScore(stad_rna_cancer, RAVmodel) %>% as.data.frame()
ucec_rna_cancer <- readRDS(file="/Users/bpheng/GSS-Britney-Fieldwork-2024/data/ucec_rna_cancer.rds")
ucec_rna_cancer <- ucec_rna_cancer[,ucec_rna_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status %in% c('msi-h', 'mss')]
ucec.meta <- colData(ucec_rna_cancer)
ucec.sampleScore <- calculateScore(ucec_rna_cancer, RAVmodel) %>% as.data.frame()
target_attr <- "patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status"
var_type <- ucec.meta@listData
unique(sapply(var_type, type))
charcTb <- ucec.meta[, sapply(var_type, class) == 'character']
factorTb <- charcTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)
levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)[levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status) == "msi-h"] <- "msi"
labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
ucec_data <- ucec.sampleScore[,validated_RAVs]
new_ucec_data <- ucec_data[nonNALabels,]
new_labels <- labels[nonNALabels]
new_ucec_data$msi <- new_labels
ucec.prediction <- predict(rf, new_ucec_data)
confusionMatrix(ucec.prediction, new_ucec_data$msi)
View(test_data)
summary(p2)
confusionMatrix(p2, test_data$MSI_Status)
data('diseaseCodes', package = "TCGAutils")
data('diseaseCodes', package = "TCGAutils")
View(diseaseCodes)
curatedTCGAData(
diseaseCode = "*", assays = "*", version = "2.0.1"
)
data('diseaseCodes', package = "TCGAutils")
curatedTCGAData(
diseaseCode = "*", assays = "RNA*", version = "2.0.1"
)
View(diseaseCodes)
curatedTCGAData(
diseaseCode = c("LUAD", "LUSC"), assays = "RNA*", version = "2.0.1"
)
data('diseaseCodes', package = "TCGAutils")
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"), assays = "RNA*", version = "2.1.1"
)
sampleTables(data)
sampleTables(data)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.1.1",
dry.run = FALSE
)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.0.1",
dry.run = FALSE
)
View(data)
sampleTables(data)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNA*", version = "2.0.1",
dry.run = FALSE
)
sampleTables(data)
View(data)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.*.1",
dry.run = FALSE
)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.*",
dry.run = FALSE
)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "*",
dry.run = FALSE
)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.1.1",
dry.run = FALSE
)
View(data)
sampleTables(data)
coad_cancer <- getWithColData(data,
'01_COAD_RNASeq2Gene-20160128')
data <- TCGAsplitAssays(data, c("01", "11"))
coad_cancer <- getWithColData(data,
'01_COAD_RNASeq2Gene-20160128')
data('diseaseCodes', package = "TCGAutils")
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.1.1",
dry.run = FALSE
)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.1.0",
dry.run = FALSE
)
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.0.1",
dry.run = FALSE
)
sampleTables(data)
View(data)
coad_cancer <- getWithColData(data,
'01_COAD_RNASeq2Gene-20160128')
data <- TCGAsplitAssays(data, c("01", "11"))
View(data)
coad_cancer <- getWithColData(data,
'01_COAD_RNASeq2Gene-20160128')
data('diseaseCodes', package = "TCGAutils")
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.0.1",
dry.run = FALSE
)
data <- TCGAsplitAssays(data, c("01", "11"))
coad_cancer <- getWithColData(data,
'01_COAD_RNASeq2Gene-20160128')
data('diseaseCodes', package = "TCGAutils")
data <- curatedTCGAData(
diseaseCode = c("COAD", "LUAD", "LUSC"),
assays = "RNASeq2Gene", version = "2.0.1",
dry.run = FALSE
)
data <- TCGAsplitAssays(data, c("01", "11"))
coad_cancer <- getWithColData(data,
'01_COAD_RNASeq2Gene-20160128')
luad_cancer <- getWithColData(data,
'01_LUAD_RNASeq2Gene-20160128')
lusc_cancer <- getWithColData(data,
'01_LUSC_RNASeq2Gene-20160128')
coad_cancer <- getWithColData(data,
'01_COAD_RNASeq2Gene-20160128')
assay(coad_cancer) <- log2(assay(coad_cancer) + 1)
luad_cancer <- getWithColData(data,
'01_LUAD_RNASeq2Gene-20160128')
assay(luad_cancer) <- log2(assay(luad_cancer) + 1)
lusc_cancer <- getWithColData(data,
'01_LUSC_RNASeq2Gene-20160128')
assay(lusc_cancer) <- log2(assay(lusc_cancer) + 1)
lusc_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status
table(lusc_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)
table(luad_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)
table(coad_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
library(randomForest)
library(caret)
})
validated_coad_data <- validate(coad_data, RAVmodel)
RAVmodel <- getModel('C2', load=TRUE)
RAVmodel <- getModel('C2', load=TRUE)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
library(randomForest)
library(caret)
})
RAVmodel <- getModel('C2', load=TRUE)
RAVmodel <- getModel('C2')
setwd("~/GSS-Britney-Fieldwork-2024")
RAVmodel <- getModel('C2')
RAVmodel <- getModel('C2', load=TRUE)
