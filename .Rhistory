# Normal
stad_rna_normal <- getWithColData(stad2,
'11_STAD_RNASeq2Gene-20160128',
mode = 'append')
assay(stad_rna_normal) <- log2(assay(stad_rna_normal) + 1)
stad_normal_meta <- colData(stad_rna_normal)
## Select columns with >10% completeness
# Cancer
keep_attribute_ind <- which(colSums(!is.na(stad_cancer_meta)) > round(nrow(stad_cancer_meta)/10))
stad_cancer <- stad_cancer_meta[keep_attribute_ind] %>% subset(select= -patientID)
saveRDS(stad_cancer, "data/stad_cancer.rds")
# Normal
keep_attribute_ind <- which(colSums(!is.na(stad_normal_meta)) > round(nrow(stad_normal_meta)/10))
stad_normal <- stad_normal_meta[keep_attribute_ind] %>% subset(select= -patientID)
saveRDS(stad_normal, "data/stad_normal.rds")
# All
keep_attribute_ind <- which(colSums(!is.na(stad_meta)) > round(nrow(stad_meta)/10))
stad_all <- stad_meta[keep_attribute_ind] %>% subset(select= -patientID)
saveRDS(stad_all, "data/stad_all.rds")
## Calculate validation scores
stad_sampleScore <- calculateScore(stad_rna, RAVmodel)
rownames(stad_sampleScore) <- gsub("\\.", "-", rownames(stad_sampleScore))
stad_cancer_sampleScore <- calculateScore(stad_rna_cancer, RAVmodel)
rownames(stad_cancer_sampleScore) <- gsub("\\.", "-", rownames(stad_cancer_sampleScore))
stad_normal_sampleScore <- calculateScore(stad_rna_normal, RAVmodel)
rownames(stad_normal_sampleScore) <- gsub("\\.", "-", rownames(stad_normal_sampleScore))
# STAD All Samples
## Sample scores only for the validated RAVs
validate_stad <- validate(stad_rna, RAVmodel)
validated_ind <- validatedSignatures(validate_stad,
RAVmodel,
num.out = 15,
scoreCutoff = 0.45,
indexOnly = TRUE)
## Subset sampleScore
stad_sampleScore_sub <- stad_sampleScore[,validated_ind] %>% as.data.frame()
write.csv(stad_sampleScore_sub , "data/stad_all_sampleScore.csv")
# Cancer
## Sample scores only for the validated RAVs
validate_stad <- validate(stad_rna_cancer, RAVmodel)
validated_ind <- validatedSignatures(validate_stad,
RAVmodel,
num.out = 15,
scoreCutoff = 0.45,
indexOnly = TRUE)
## Subset sampleScore
stad_cancer_sampleScore_sub <- stad_cancer_sampleScore[,validated_ind] %>% as.data.frame()
write.csv(stad_cancer_sampleScore_sub , "data/stad_cancer_sampleScore.csv")
# Normal
## Sample scores only for the validated RAVs
validate_stad <- validate(stad_rna_normal, RAVmodel)
validated_ind <- validatedSignatures(validate_stad,
RAVmodel,
num.out = 15,
scoreCutoff = 0.45,
indexOnly = TRUE)
## Subset sampleScore
stad_normal_sampleScore_sub <- stad_normal_sampleScore[,validated_ind] %>% as.data.frame()
write.csv(stad_normal_sampleScore_sub , "data/stad_normal_sampleScore.csv")
## Separate COAL All into two subsets:
charcTb <- stad_all[, sapply(stad_all@listData, class) == 'character']
numTb <- stad_all[, sapply(stad_all@listData, class) %in% c('numeric', 'integer')]
write.csv(charcTb, "data/stad_all_char.csv", row.names = TRUE)
write.csv(numTb, "data/stad_all_num.csv", row.names = TRUE)
## Separate STAD Cancer into two subsets:
charcTb <- stad_cancer[, sapply(stad_cancer@listData, class) == 'character'] # 374 metadata attributes (char)
numTb <- stad_cancer[, sapply(stad_cancer@listData, class) %in% c('numeric', 'integer')] # 283 samples x 328 metadata attributes (num)
write.csv(charcTb, "data/stad_cancer_char.csv", row.names = TRUE)
write.csv(numTb, "data/stad_cancer_num.csv", row.names = TRUE)
## Separate STAD Normal into two subsets:
charcTb <- stad_normal[, sapply(stad_normal@listData, class) == 'character']
numTb <- stad_normal[, sapply(stad_normal@listData, class) %in% c('numeric', 'integer')]
write.csv(charcTb, "data/stad_normal_char.csv", row.names = TRUE)
write.csv(numTb, "data/stad_normal_num.csv", row.names = TRUE)
suppressPackageStartupMessages({
library(tidyverse)
})
## SummarizedExperiment object containing COAD dataset
coad_all <- readRDS("data/coad_all.rds") # 20,501 genes x 261 samples
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("coad_all_sampleScore.csv", row.names = 1) # 261 samples x 15 RAVs
## SummarizedExperiment object containing COAD dataset
coad_all <- readRDS("data/coad_all.rds") # 20,501 genes x 261 samples
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("data/coad_all_sampleScore.csv", row.names = 1) # 261 samples x 15 RAVs
## COAD categorical variables
charTb <- read.csv("data/coad_all_char.csv", row.names = 1) # 261 samples x 182 metadata attributes (char)
factorTb <- charTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)
nlevel <- sapply(factorTb, function(x) {
res <- levels(x) %>% na.omit
return(length(res))
})
factorTb_1_lv <- factorTb[nlevel == 1]
factorTb_2_lv <- factorTb[nlevel == 2]
factorTb_m_lv <- factorTb[nlevel > 2]
View(factorTb)
View(factorTb_1_lv)
wilcox_test_res <- as.data.frame(matrix(nrow = ncol(factorTb_2_lv),
ncol = ncol(sampleScore_sub)))
rownames(wilcox_test_res) <- colnames(factorTb_2_lv)
colnames(wilcox_test_res) <- colnames(sampleScore_sub)
wtest_coad_wvalue <- wilcox_test_res
wtest_coad_pvalue <- wilcox_test_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_2_lv))) {
## wilcoxon test
wilcox_test <- wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j], alternative="two.sided")
## W value
wval <- wilcox_test$statistic
wtest_coad_wvalue[j, i] <- wval
## p-value
pval <- wilcox_test$p.value
wtest_coad_pvalue[j, i] <- pval
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(wtest_coad_wvalue))
wtest_coad_wvalue_2 <- wtest_coad_wvalue[-batch_char_ind,]
wtest_coad_pvalue_2 <- wtest_coad_pvalue[-batch_char_ind,]
heatmap(as.matrix(wtest_coad_wvalue_2), main = 'COAD Wilcoxon Test Cancer Binomial')
#Only view w-values with significant p-value (<0.01)
wtest_coad_sig_wvalue <- wilcox_test_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_2_lv))) {
if (wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j], alternative="two.sided")$p.val < 0.01) {
wtest_coad_sig_wvalue[j, i] <- wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j],
alternative="two.sided")$statistic
}
}
}
na_ind <- apply(wtest_coad_sig_wvalue, 1, function(x) all(is.na(x)))
wtest_coad_sig_wvalue <- wtest_coad_sig_wvalue[!na_ind, ]
batch_char_ind_2 <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(wtest_coad_sig_wvalue))
wtest_coad_sig_wvalue <- wtest_coad_sig_wvalue[-batch_char_ind_2, ]
kruskal_wallis_res <- as.data.frame(matrix(nrow = ncol(factorTb_m_lv),
ncol = ncol(sampleScore_sub)))
rownames(kruskal_wallis_res) <- colnames(factorTb_m_lv)
colnames(kruskal_wallis_res) <- colnames(sampleScore_sub)
kwtest_coad_wvalue <- kruskal_wallis_res
kwtest_coad_pvalue <- kruskal_wallis_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_m_lv))) {
## Kruskal-Wallis Test
kruskal_test <- kruskal.test(sampleScore_sub[, i] ~ factorTb_m_lv[,j])
## Kruskal-Wallis Chi-squared value
kw_val <-  kruskal_test$statistic
kwtest_coad_wvalue[j, i] <- kw_val
## p-value
pval <-  kruskal_test$p.value
kwtest_coad_pvalue[j, i] <- pval
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(kwtest_coad_wvalue))
kwtest_coad_wvalue <- kwtest_coad_wvalue[-batch_char_ind,]
kwtest_coad_pvalue <- kwtest_coad_pvalue[-batch_char_ind,]
heatmap(as.matrix(kwtest_coad_wvalue), main = 'COAD All Samples: Kruskal-Wallis Test')
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
})
## SummarizedExperiment object containing STAD dataset
stad_all <- readRDS("data/stad_all.rds") # 20,501 genes x 261 samples
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("data/stad_all_sampleScore.csv", row.names = 1) # 261 samples x 15 RAVs
## STAD categorical variables
charTb <- read.csv("data/stad_all_char.csv", row.names = 1) # 261 samples x 182 metadata attributes (char)
factorTb <- charTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)
nlevel <- sapply(factorTb, function(x) {
res <- levels(x) %>% na.omit
return(length(res))
})
factorTb_1_lv <- factorTb[nlevel == 1]
factorTb_2_lv <- factorTb[nlevel == 2]
factorTb_m_lv <- factorTb[nlevel > 2]
wilcox_test_res <- as.data.frame(matrix(nrow = ncol(factorTb_2_lv),
ncol = ncol(sampleScore_sub)))
rownames(wilcox_test_res) <- colnames(factorTb_2_lv)
colnames(wilcox_test_res) <- colnames(sampleScore_sub)
wtest_stad_wvalue <- wilcox_test_res
wtest_stad_pvalue <- wilcox_test_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_2_lv))) {
## wilcoxon test
wilcox_test <- wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j], alternative="two.sided")
## W value
wval <- wilcox_test$statistic
wtest_stad_wvalue[j, i] <- wval
## p-value
pval <- wilcox_test$p.value
wtest_stad_pvalue[j, i] <- pval
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(wtest_stad_wvalue))
wtest_stad_wvalue_2 <- wtest_stad_wvalue[-batch_char_ind,]
wtest_stad_pvalue_2 <- wtest_stad_pvalue[-batch_char_ind,]
heatmap(as.matrix(wtest_stad_wvalue_2), main = 'STAD All Samples: Wilcoxon Test Binomial')
#Only view w-values with significant p-value (<0.01)
wtest_stad_sig_wvalue <- wilcox_test_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_2_lv))) {
if (wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j], alternative="two.sided")$p.val < 0.01) {
wtest_stad_sig_wvalue[j, i] <- wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j],
alternative="two.sided")$statistic
}
}
}
na_ind <- apply(wtest_stad_sig_wvalue, 1, function(x) all(is.na(x)))
wtest_stad_sig_wvalue <- wtest_stad_sig_wvalue[!na_ind, ]
batch_char_ind_2 <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(wtest_stad_sig_wvalue))
wtest_stad_sig_wvalue <- wtest_stad_sig_wvalue[-batch_char_ind_2, ]
options(ztable.type='html')
ztable(wtest_stad_sig_wvalue) %>%
makeHeatmap(palette = 'Blues') %>%
print(caption='Cancer Sample W-test with p-values < 0.01')
kruskal_wallis_res <- as.data.frame(matrix(nrow = ncol(factorTb_m_lv),
ncol = ncol(sampleScore_sub)))
rownames(kruskal_wallis_res) <- colnames(factorTb_m_lv)
colnames(kruskal_wallis_res) <- colnames(sampleScore_sub)
kwtest_stad_wvalue <- kruskal_wallis_res
kwtest_stad_pvalue <- kruskal_wallis_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_m_lv))) {
## Kruskal-Wallis Test
kruskal_test <- kruskal.test(sampleScore_sub[, i] ~ factorTb_m_lv[,j])
## Kruskal-Wallis Chi-squared value
kw_val <-  kruskal_test$statistic
kwtest_stad_wvalue[j, i] <- kw_val
## p-value
pval <-  kruskal_test$p.value
kwtest_stad_pvalue[j, i] <- pval
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(kwtest_stad_wvalue))
kwtest_stad_wvalue <- kwtest_stad_wvalue[-batch_char_ind,]
kwtest_stad_pvalue <- kwtest_stad_pvalue[-batch_char_ind,]
heatmap(as.matrix(kwtest_stad_wvalue), main = 'STAD All Samples: Kruskal-Wallis Test')
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
})
## SummarizedExperiment object containing UCEC dataset
ucec_all <- readRDS("data/ucec_all.rds") # 20,501 genes x 261 samples
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("data/ucec_all_sampleScore.csv", row.names = 1) # 261 samples x 15 RAVs
## UCEC categorical variables
charTb <- read.csv("data/ucec_all_char.csv", row.names = 1) # 261 samples x 182 metadata attributes (char)
factorTb <- charTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)
nlevel <- sapply(factorTb, function(x) {
res <- levels(x) %>% na.omit
return(length(res))
})
factorTb_1_lv <- factorTb[nlevel == 1]
factorTb_2_lv <- factorTb[nlevel == 2]
factorTb_m_lv <- factorTb[nlevel > 2]
wilcox_test_res <- as.data.frame(matrix(nrow = ncol(factorTb_2_lv),
ncol = ncol(sampleScore_sub)))
rownames(wilcox_test_res) <- colnames(factorTb_2_lv)
colnames(wilcox_test_res) <- colnames(sampleScore_sub)
wtest_ucec_wvalue <- wilcox_test_res
wtest_ucec_pvalue <- wilcox_test_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_2_lv))) {
## wilcoxon test
wilcox_test <- wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j], alternative="two.sided")
## W value
wval <- wilcox_test$statistic
wtest_ucec_wvalue[j, i] <- wval
## p-value
pval <- wilcox_test$p.value
wtest_ucec_pvalue[j, i] <- pval
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(wtest_ucec_wvalue))
wtest_ucec_wvalue_2 <- wtest_ucec_wvalue[-batch_char_ind,]
wtest_ucec_pvalue_2 <- wtest_ucec_pvalue[-batch_char_ind,]
heatmap(as.matrix(wtest_ucec_wvalue_2), main = 'UCEC All Samples: Wilcoxon Test Binomial')
#Only view w-values with significant p-value (<0.01)
wtest_ucec_sig_wvalue <- wilcox_test_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_2_lv))) {
if (wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j], alternative="two.sided")$p.val < 0.01) {
wtest_ucec_sig_wvalue[j, i] <- wilcox.test(sampleScore_sub[, i] ~ factorTb_2_lv[,j],
alternative="two.sided")$statistic
}
}
}
na_ind <- apply(wtest_ucec_sig_wvalue, 1, function(x) all(is.na(x)))
wtest_ucec_sig_wvalue <- wtest_ucec_sig_wvalue[!na_ind, ]
batch_char_ind_2 <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(wtest_ucec_sig_wvalue))
wtest_ucec_sig_wvalue <- wtest_ucec_sig_wvalue[-batch_char_ind_2, ]
options(ztable.type='html')
ztable(wtest_ucec_sig_wvalue) %>%
makeHeatmap(palette = 'Blues') %>%
print(caption='Cancer Sample W-test with p-values < 0.01')
kruskal_wallis_res <- as.data.frame(matrix(nrow = ncol(factorTb_m_lv),
ncol = ncol(sampleScore_sub)))
rownames(kruskal_wallis_res) <- colnames(factorTb_m_lv)
colnames(kruskal_wallis_res) <- colnames(sampleScore_sub)
kwtest_ucec_wvalue <- kruskal_wallis_res
kwtest_ucec_pvalue <- kruskal_wallis_res
for (i in seq_len(ncol(sampleScore_sub))) {
for (j in seq_len(ncol(factorTb_m_lv))) {
## Kruskal-Wallis Test
kruskal_test <- kruskal.test(sampleScore_sub[, i] ~ factorTb_m_lv[,j])
## Kruskal-Wallis Chi-squared value
kw_val <-  kruskal_test$statistic
kwtest_ucec_wvalue[j, i] <- kw_val
## p-value
pval <-  kruskal_test$p.value
kwtest_ucec_pvalue[j, i] <- pval
}
}
batch_char_ind <- grep('analyte|analytes|portion|procurement|aliquot|uuid|barcode',
rownames(kwtest_ucec_wvalue))
kwtest_ucec_wvalue <- kwtest_ucec_wvalue[-batch_char_ind,]
kwtest_ucec_pvalue <- kwtest_ucec_pvalue[-batch_char_ind,]
heatmap(as.matrix(kwtest_ucec_wvalue), main = 'UCEC All Samples: Kruskal-Wallis Test')
factorTb_m_lv$msi_status_7_marker_call
table(factorTb_m_lv$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status,
factorTb_m_lv$msi_status_7_marker_call)
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
})
## SummarizedExperiment object containing COAD dataset
coad_all <- readRDS("data/coad_all.rds")
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("data/coad_all_sampleScore.csv", row.names = 1)
## COAD categorical variables
numTb <- read.csv("data/coad_all_num.csv", row.names = 1)
## R squared value function
calculateRsq <- function (x, y) stats::cor(x, y, use = 'na.or.complete') ^ 2
## Calculate r-squared for numeric attributes
rsq_numAttr <- as.data.frame(matrix(nrow = ncol(numTb),
ncol = ncol(sampleScore_sub)))
colnames(rsq_numAttr) <- colnames(sampleScore_sub)
rownames(rsq_numAttr) <- colnames(numTb)
for (i in seq_len(ncol(numTb))) {
for (j in seq_len(ncol(sampleScore_sub))) {
rsq <- calculateRsq(numTb[[i]], sampleScore_sub[, j])
rsq_numAttr[i, j] <- rsq
}
}
rsq_numAttr <- na.omit(rsq_numAttr)
curoff <- 0.3 # cutoff of the minimum r-sq value
max_rav <- apply(rsq_numAttr, 1, max)
max_attr <- which(max_rav > curoff) # the maximum r-sq of the sample score should be above this cutoff
target_rsq <- rsq_numAttr[max_attr,]
heatmap(as.matrix(target_rsq), scale = "none")
## Value is centered and scaled in the column direction (`scale = "column"`)
heatmap(as.matrix(target_rsq), scale = "column")
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
})
## SummarizedExperiment object containing STAD dataset
stad_all <- readRDS("data/stad_all.rds")
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("data/stad_all_sampleScore.csv", row.names = 1)
## STAD categorical variables
numTb <- read.csv("data/stad_all_num.csv", row.names = 1)
## R squared value function
calculateRsq <- function (x, y) stats::cor(x, y, use = 'na.or.complete') ^ 2
## Calculate r-squared for numeric attributes
rsq_numAttr <- as.data.frame(matrix(nrow = ncol(numTb),
ncol = ncol(sampleScore_sub)))
colnames(rsq_numAttr) <- colnames(sampleScore_sub)
rownames(rsq_numAttr) <- colnames(numTb)
for (i in seq_len(ncol(numTb))) {
for (j in seq_len(ncol(sampleScore_sub))) {
rsq <- calculateRsq(numTb[[i]], sampleScore_sub[, j])
rsq_numAttr[i, j] <- rsq
}
}
rsq_numAttr <- na.omit(rsq_numAttr)
curoff <- 0.3 # cutoff of the minimum r-sq value
max_rav <- apply(rsq_numAttr, 1, max)
max_attr <- which(max_rav > curoff) # the maximum r-sq of the sample score should be above this cutoff
target_rsq <- rsq_numAttr[max_attr,]
heatmap(as.matrix(target_rsq), scale = "none")
## Value is centered and scaled in the column direction (`scale = "column"`)
heatmap(as.matrix(target_rsq), scale = "column")
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
})
## SummarizedExperiment object containing UCEC dataset
ucec_all <- readRDS("data/ucec_all.rds")
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("data/ucec_all_sampleScore.csv", row.names = 1)
## UCEC categorical variables
numTb <- read.csv("data/ucec_all_num.csv", row.names = 1)
## R squared value function
calculateRsq <- function (x, y) stats::cor(x, y, use = 'na.or.complete') ^ 2
## Calculate r-squared for numeric attributes
rsq_numAttr <- as.data.frame(matrix(nrow = ncol(numTb),
ncol = ncol(sampleScore_sub)))
colnames(rsq_numAttr) <- colnames(sampleScore_sub)
rownames(rsq_numAttr) <- colnames(numTb)
for (i in seq_len(ncol(numTb))) {
for (j in seq_len(ncol(sampleScore_sub))) {
rsq <- calculateRsq(numTb[[i]], sampleScore_sub[, j])
rsq_numAttr[i, j] <- rsq
}
}
rsq_numAttr <- na.omit(rsq_numAttr)
curoff <- 0.3 # cutoff of the minimum r-sq value
max_rav <- apply(rsq_numAttr, 1, max)
max_attr <- which(max_rav > curoff) # the maximum r-sq of the sample score should be above this cutoff
target_rsq <- rsq_numAttr[max_attr,]
heatmap(as.matrix(target_rsq), scale = "none")
suppressPackageStartupMessages({
# BiocManager
library(GenomicSuperSignature)
library(curatedTCGAData)
library(MultiAssayExperiment)
library(TCGAutils)
library(ComplexHeatmap)
# CRAN
library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
library(magick)
library(wordcloud)
library(ztable)
library(metafolio)
})
## SummarizedExperiment object containing UCEC dataset
ucec_all <- readRDS("data/ucec_all.rds")
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("data/ucec_all_sampleScore.csv", row.names = 1)
## UCEC categorical variables
numTb <- read.csv("data/ucec_all_num.csv", row.names = 1)
## R squared value function
calculateRsq <- function (x, y) stats::cor(x, y, use = 'na.or.complete') ^ 2
## Calculate r-squared for numeric attributes
rsq_numAttr <- as.data.frame(matrix(nrow = ncol(numTb),
ncol = ncol(sampleScore_sub)))
colnames(rsq_numAttr) <- colnames(sampleScore_sub)
rownames(rsq_numAttr) <- colnames(numTb)
for (i in seq_len(ncol(numTb))) {
for (j in seq_len(ncol(sampleScore_sub))) {
rsq <- calculateRsq(numTb[[i]], sampleScore_sub[, j])
rsq_numAttr[i, j] <- rsq
}
}
rsq_numAttr <- na.omit(rsq_numAttr)
curoff <- 0.2 # cutoff of the minimum r-sq value
max_rav <- apply(rsq_numAttr, 1, max)
max_attr <- which(max_rav > curoff) # the maximum r-sq of the sample score should be above this cutoff
target_rsq <- rsq_numAttr[max_attr,]
heatmap(as.matrix(target_rsq), scale = "none")
## Value is centered and scaled in the column direction (`scale = "column"`)
heatmap(as.matrix(target_rsq), scale = "column")
