---
title: "Deliverable 2: Random Forest Classification Model - Predicting Microsatellite Status"
author: "Britney Pheng"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
output: html_document
editor: visual
---

# Prepartion

## Packages
```{r setup, }
knitr::opts_chunk$set(echo = TRUE)

suppressPackageStartupMessages({
  # BiocManager
  library(GenomicSuperSignature)
  library(curatedTCGAData)
  library(MultiAssayExperiment)
  library(TCGAutils)
  library(ComplexHeatmap)
  
  # CRAN
  library(tidyverse) # includes dplyr, ggplot2, magrittr, tidyr
  library(magick)
  library(wordcloud)
  library(ztable)
  library(metafolio)
  library(randomForest)
  library(caret)
})
```

## Load RAVmodel
```{r message=FALSE, warning=FALSE}
RAVmodel <- getModel('C2', load=TRUE)
```

## Load combined_data (COAD, STAD, UCEC cancer sample data)
```{r}
combined_data <- readRDS("data/combinedTCGAdata/combined_data.rds")

tcga_dat <- combined_data[,combined_data@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status %in% c('msi-h', 'mss')]

combined_data_meta <- colData(tcga_dat)
```

## Split combined_data for training
```{r}
# Randomly select 70% of samples for training
set.seed(1)
num_sample <- ncol(tcga_dat)
train_sample_ind <- sample(seq_len(num_sample), round(num_sample*0.7))

meta_train <- combined_data_meta[train_sample_ind,] 
data_train <- tcga_dat[, train_sample_ind] # 20,501 genes x 612 samples x 3205 attributes
```

```{r}
# Remove batch effect variables from metadata table
batch_var <- "analyte|portion|procurement|aliquot|uuid|barcode"
batch_ind <- grep(batch_var, colnames(meta_train))

meta_train <- meta_train[,-batch_ind] # 612 samples x 1064 metadata attributes
```

```{r}
meta_test <- combined_data_meta[-train_sample_ind,-batch_ind]
data_test <- tcga_dat[, -train_sample_ind]
```

## Split Variable Types for Train Data
```{r}
## Check for data types in listData
var_type <- meta_train@listData
unique(sapply(var_type, type))

## Separate training data's metadata into two subsets: 
## character variables (~ categorical) and numeric variables (~ continuous)
charcTb <- meta_train[, sapply(var_type, class) == 'character']
numTb <- meta_train[, sapply(var_type, class) %in% c('numeric', 'integer')]
```

## Split Variable Types for Test Data
```{r}
## Check for data types in listData
var_type_testdata <- meta_test@listData

## Separate test data's metadata into two subsets: 
## character variables (~ categorical) and numeric variables (~ continuous)
charcTb_testdata <- meta_test[, sapply(var_type_testdata, class) == 'character']
numTb_testdata <- meta_test[, sapply(var_type_testdata, class) %in% c('numeric', 'integer')]
```

## Sample Scores
```{r}
## Calculate validation scores
sampleScore <- calculateScore(data_train, RAVmodel)
rownames(sampleScore) <- gsub("\\.", "-", rownames(sampleScore))

## Test data: calculate validation scores
sampleScore_testdata <- calculateScore(data_test, RAVmodel)
rownames(sampleScore_testdata) <- gsub("\\.", "-", rownames(sampleScore_testdata))

```

## Sample scores for all RAVs
```{r}
## Training Data
validate_data <- validate(data_train, RAVmodel)
#heatmapTable(validate_data, RAVmodel)

# validated_ind <- validatedSignatures(validate_data,
#                                      RAVmodel,
#                                      num.out = 4764, # We want to validate all RAVs so we can select which ones to include in the RF model
#                                      #scoreCutoff = 0.45,
#                                      indexOnly = TRUE)
# saveRDS(validated_ind, file="/Users/bpheng/GSS-Britney-Fieldwork-2024/traindata_validatedRAVs.rds")
validated_ind <- readRDS("/Users/bpheng/GSS-Britney-Fieldwork-2024/traindata_validatedRAVs.rds")
#Already saved as an RDS file, called above

## Subset sampleScore
sampleScore_sub <- sampleScore[,validated_ind] %>% as.data.frame()

## Test Data
validate_testdata <- validate(data_test, RAVmodel)
# heatmapTable(validate_testdata, RAVmodel, num.out = 15)
# 
# validated_ind_testdata <- validatedSignatures(validate_testdata,
#                                      RAVmodel,
#                                      num.out = 4764,
#                                      #scoreCutoff = 0.45,
#                                      indexOnly = TRUE)
# 
# saveRDS(validated_ind_testdata, file="/Users/bpheng/GSS-Britney-Fieldwork-2024/testdata_validatedRAVs.rds")

validated_ind_testdata <- readRDS("/Users/bpheng/GSS-Britney-Fieldwork-2024/testdata_validatedRAVs.rds")

## Subset sampleScore
sampleScore_sub_testdata <- sampleScore_testdata[,validated_ind_testdata] %>% as.data.frame()
```

## Clean up factor level name for microsatellite instability - high to "msi"
```{r}
## Convert character variables into the factor data type
factorTb <- charcTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)

levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)[levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status) == "msi-h"] <- "msi"
```

```{r}
## Convert character variables into the factor data type
factorTb_testdata <- charcTb_testdata
factorTb_testdata[sapply(factorTb_testdata, is.character)] <- lapply(factorTb_testdata[sapply(factorTb_testdata, is.character)], factor)

levels(factorTb_testdata@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)[levels(factorTb_testdata@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status) == "msi-h"] <- "msi"
```

## Use top validated RAVs for TCGA-COAD,STAD, UCEC
```{r}
RAVs_combinedTCGA <- c(517, 220, 2109, 1303, 324, 438, 868, #RAVs that have statistically significant pairwise wilcoxon p-values of mss vs msi-h
                       834, 190, 1166, #RAVs with significant KW test statistic (p-value < 0.05) for COAD
                       2344, #significant KW test value for STAD, includes 324, 868, 517 above
                       357) #UCEC KW test value (p-value = 0.056)

validated_RAVs <- paste("RAV", RAVs_combinedTCGA, sep="")
#validated_RAVs <- c("RAV357", "RAV27", "RAV834", "RAV190", "RAV1166", "RAV517",
                    #"RAV2344", "RAV324", "RAV438", "RAV220", "RAV868", "RAV1008", "RAV625")
target_attr <- "patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status"

labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
data <- sampleScore_sub[,validated_RAVs]

train_data <- data[nonNALabels,]
train_labels <- labels[nonNALabels]
train_data$MSI_Status <- train_labels
```

# Random forest classification model
```{r}
rf <- randomForest(MSI_Status~., data=train_data, proximity=TRUE)
print(rf)

p1 <- predict(rf, train_data)
#confusionMatrix(p1, train_data$MSI_Status)

confusion_matrix <- table(p1, train_data$MSI_Status)
confusion_matrix

accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(accuracy)

importance(rf)
varImpPlot(rf)
```

```{r}
predictions1 <- predict(rf, newdata = train_data, predict.all = TRUE)

tree_predictions <- predictions1$individual  # Extract tree predictions

# Calculate accuracy for each tree (for classification)
tree_accuracy <- apply(tree_predictions, 2, function(tree_pred) {
  mean(tree_pred == train_data$MSI_Status)
})

# print(tree_accuracy)
# sort(tree_accuracy)

# Calculate weights proportional to accuracy
weights <- tree_accuracy / sum(tree_accuracy)

# Combine predictions using weighted average
weighted_predictions <- apply(tree_predictions, 1, function(preds) {
  weighted_pred <- tapply(weights, preds, sum)
  names(which.max(weighted_pred))
})

# Convert weighted predictions to factor
weighted_predictions <- as.factor(weighted_predictions)

confusion_matrix <- table(weighted_predictions, train_data$MSI_Status)
confusion_matrix
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(accuracy)


```

## Using Test Data with the RF Model

```{r}
labels <- factorTb_testdata[[target_attr]]
nonNALabels <- which(!is.na(labels))
data <- sampleScore_sub_testdata[,validated_RAVs]

test_data <- data[nonNALabels,]
test_labels <- labels[nonNALabels]

test_data$MSI_Status <- test_labels
```

```{r}
p2 <- predict(rf, test_data)
confusionMatrix(p2, test_data$MSI_Status)
```

```{r}
library("rpart")
library("rpart.plot")

#Fit new model with rpart
train_msi_model <- rpart(MSI_Status ~., data = train_data)
test_msi_model <- rpart(MSI_Status ~., data = test_data)
```

```{r}
rpart.plot(train_msi_model)
```

```{r}
rpart.plot(test_msi_model)
```

# Test RF model with individual TCGA data cancer types: COAD, UCEC, STAD

## COAD
```{r include=FALSE}
coad_rna_cancer <- readRDS(file="/Users/bpheng/GSS-Britney-Fieldwork-2024/data/coad_rna_cancer.rds")

coad_rna_cancer <- coad_rna_cancer[,coad_rna_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status %in% c('msi-h', 'mss')]

coad.meta <- colData(coad_rna_cancer)
coad.sampleScore <- calculateScore(coad_rna_cancer, RAVmodel) %>% as.data.frame()
```

```{r include=FALSE}
target_attr <- "patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status"

var_type <- coad.meta@listData
unique(sapply(var_type, type))
charcTb <- coad.meta[, sapply(var_type, class) == 'character']
factorTb <- charcTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)

levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)[levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status) == "msi-h"] <- "msi"

labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
coad_data <- coad.sampleScore[,validated_RAVs]

new_coad_data <- coad_data[nonNALabels,]
new_labels <- labels[nonNALabels]
new_coad_data$msi <- new_labels

```

```{r}
coad.prediction <- predict(rf, new_coad_data)
confusionMatrix(coad.prediction, new_coad_data$msi)
```

## UCEC
```{r include=FALSE}
ucec_rna_cancer <- readRDS(file="/Users/bpheng/GSS-Britney-Fieldwork-2024/data/ucec_rna_cancer.rds")

ucec_rna_cancer <- ucec_rna_cancer[,ucec_rna_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status %in% c('msi-h', 'mss')]

ucec.meta <- colData(ucec_rna_cancer)
ucec.sampleScore <- calculateScore(ucec_rna_cancer, RAVmodel) %>% as.data.frame()
```

```{r include=FALSE}
target_attr <- "patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status"

var_type <- ucec.meta@listData
unique(sapply(var_type, type))
charcTb <- ucec.meta[, sapply(var_type, class) == 'character']
factorTb <- charcTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)

levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)[levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status) == "msi-h"] <- "msi"

labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
ucec_data <- ucec.sampleScore[,validated_RAVs]

new_ucec_data <- ucec_data[nonNALabels,]
new_labels <- labels[nonNALabels]
new_ucec_data$msi <- new_labels

```

```{r}
ucec.prediction <- predict(rf, new_ucec_data)
confusionMatrix(ucec.prediction, new_ucec_data$msi)
```

## STAD
```{r include=FALSE}
stad_rna_cancer <- readRDS(file="/Users/bpheng/GSS-Britney-Fieldwork-2024/data/stad_rna_cancer.rds")

stad_rna_cancer <- stad_rna_cancer[,stad_rna_cancer@colData@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status %in% c('msi-h', 'mss')]

stad.meta <- colData(stad_rna_cancer)
stad.sampleScore <- calculateScore(stad_rna_cancer, RAVmodel) %>% as.data.frame()
```

```{r include=FALSE}
target_attr <- "patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status"

var_type <- stad.meta@listData
unique(sapply(var_type, type))
charcTb <- stad.meta[, sapply(var_type, class) == 'character']
factorTb <- charcTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)

levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status)[levels(factorTb@listData$patient.microsatellite_instability_test_results.microsatellite_instability_test_result.mononucleotide_and_dinucleotide_marker_panel_analysis_status) == "msi-h"] <- "msi"

labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
stad_data <- stad.sampleScore[,validated_RAVs]

new_stad_data <- stad_data[nonNALabels,]
new_labels <- labels[nonNALabels]
new_stad_data$msi <- new_labels

```

```{r}
stad.prediction <- predict(rf, new_stad_data)
confusionMatrix(stad.prediction, new_stad_data$msi)
```

# Test with curatedCRCData
```{r message=FALSE, warning=FALSE}
library(curatedCRCData)
data(package="curatedCRCData")
```

## curatedCRC Dataset 1: GSE13067_eset
```{r}
data(GSE13067_eset)

library(SummarizedExperiment)

mySummarizedExperiment <- makeSummarizedExperimentFromExpressionSet(GSE13067_eset)
assay(mySummarizedExperiment) <- log2(assay(mySummarizedExperiment) + 1)

#mySummarizedExperiment@colData$msi
mySummarizedExperiment@colData@listData[["msi"]] <- gsub("MSS", "mss", mySummarizedExperiment@colData@listData[["msi"]] )
mySummarizedExperiment@colData@listData[["msi"]] <- gsub("MSI", "msi", mySummarizedExperiment@colData@listData[["msi"]] )

GSE13067.meta <- colData(mySummarizedExperiment)
GSE13067.sampleScore <- calculateScore(mySummarizedExperiment, RAVmodel) %>% as.data.frame()
```

```{r include=FALSE}
target_attr <- "msi"

var_type <- GSE13067.meta@listData
unique(sapply(var_type, type))
charcTb <- GSE13067.meta[, sapply(var_type, class) == 'character']
factorTb <- charcTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)

labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
data <- GSE13067.sampleScore[,validated_RAVs]

new_data <- data[nonNALabels,]
new_labels <- labels[nonNALabels]
new_data$msi <- new_labels
```

```{r}
GSE13067.prediction <- predict(rf, new_data)
confusionMatrix(GSE13067.prediction, new_data$msi)
```

## curatedCRC Dataset 2: GSE13294_eset
```{r}
data(GSE13294_eset)
GSE13294_eset <- makeSummarizedExperimentFromExpressionSet(GSE13294_eset)
assay(GSE13294_eset) <- log2(assay(GSE13294_eset) + 1)


GSE13294_eset@colData@listData[["msi"]] <- gsub("MSS", "mss", GSE13294_eset@colData@listData[["msi"]] )
GSE13294_eset@colData@listData[["msi"]] <- gsub("MSI", "msi", GSE13294_eset@colData@listData[["msi"]] )

GSE13294.meta <- colData(GSE13294_eset)
GSE13294.sampleScore <- calculateScore(GSE13294_eset, RAVmodel) %>% as.data.frame()

```

```{r include=FALSE}
target_attr <- "msi"

var_type <- GSE13294.meta@listData
unique(sapply(var_type, type))
charcTb <- GSE13294.meta[, sapply(var_type, class) == 'character']

factorTb <- charcTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)

labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
data <- GSE13294.sampleScore[,validated_RAVs]

new_data <- data[nonNALabels,]
new_labels <- labels[nonNALabels]
new_data$msi <- new_labels
```

```{r}
GSE13294.prediction <- predict(rf, new_data)
confusionMatrix(GSE13294.prediction, new_data$msi)
```
